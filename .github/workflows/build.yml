name: Build and Test
on: [push, pull_request]
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            pg-version: 15
          - os: macos-latest
            pg-version: 15
          - os: windows-latest
            pg-version: 15
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-${{ matrix.pg-version }} postgresql-server-dev-${{ matrix.pg-version }}
      
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install git icu4c pkg-config postgresql@${{ matrix.pg-version }}
      
      - name: Install PostgreSQL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install postgresql${{ matrix.pg-version }} --params '/Password:postgres' -y
          echo "C:\Program Files\PostgreSQL\${{ matrix.pg-version }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Program Files\PostgreSQL\${{ matrix.pg-version }}\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Cache pgrx
        uses: actions/cache@v3
        with:
          path: ~/.pgrx
          key: ${{ runner.os }}-pgrx-pg${{ matrix.pg-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pgrx-pg${{ matrix.pg-version }}-
      
      - name: Install pgrx
        run: |
          cargo install --locked cargo-pgrx --version 0.13.1 || true
          cargo pgrx init --pg${{ matrix.pg-version }}
        env:
          CARGO_HTTP_TIMEOUT: 300
          PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && '/opt/homebrew/opt/icu4c/lib/pkgconfig:/opt/homebrew/opt/postgresql@15/lib/pkgconfig' || '' }}
      
      - name: Lint
        run: |
          cargo fmt --all -- --check
          cargo clippy --all -- -D warnings
      
      - name: Build Extension (Windows)
        if: runner.os == 'Windows'
        run: |
          cargo pgrx package --pg-config "C:\Program Files\PostgreSQL\${{ matrix.pg-version }}\bin\pg_config.exe" --target x86_64-pc-windows-msvc
      
      - name: Build Extension (Other OS)
        if: runner.os != 'Windows'
        run: cargo pgrx package --pg-config $(which pg_config)
      
      - name: Upload Extension Artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: pg_sqids-${{ runner.os }}
          path: target/release/pg_sqids-pg${{ matrix.pg-version }}/lib/pg_sqids.so
      
      - name: Upload Extension Artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: pg_sqids-${{ runner.os }}
          path: target/release/pg_sqids-pg${{ matrix.pg-version }}/lib/pg_sqids.dylib
      
      - name: Upload Extension Artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: pg_sqids-${{ runner.os }}
          path: target/release/pg_sqids-pg${{ matrix.pg-version }}/lib/pg_sqids.dll
      
      - name: Test
        run: cargo test --all
  
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-